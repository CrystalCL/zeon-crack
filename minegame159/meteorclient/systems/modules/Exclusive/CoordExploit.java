/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.util.Formatting
 *  net.minecraft.entity.Entity
 *  net.minecraft.entity.EntityType
 *  net.minecraft.entity.passive.TameableEntity
 *  net.minecraft.util.math.BlockPos
 *  net.minecraft.util.math.Vec3d
 *  net.minecraft.text.BaseText
 *  net.minecraft.text.Text
 *  net.minecraft.text.LiteralText
 *  net.minecraft.network.packet.s2c.play.WorldEventS2CPacket
 *  net.minecraft.network.packet.s2c.play.EntityPositionS2CPacket
 *  org.apache.commons.io.FileUtils
 */
package minegame159.meteorclient.systems.modules.Exclusive;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import meteordevelopment.orbit.EventHandler;
import minegame159.meteorclient.events.packets.PacketEvent;
import minegame159.meteorclient.settings.BoolSetting;
import minegame159.meteorclient.settings.DoubleSetting;
import minegame159.meteorclient.settings.Setting;
import minegame159.meteorclient.settings.SettingGroup;
import minegame159.meteorclient.systems.modules.Categories;
import minegame159.meteorclient.systems.modules.Module;
import minegame159.meteorclient.utils.player.ChatUtils;
import net.minecraft.util.Formatting;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.passive.TameableEntity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.text.BaseText;
import net.minecraft.text.Text;
import net.minecraft.text.LiteralText;
import net.minecraft.network.packet.s2c.play.WorldEventS2CPacket;
import net.minecraft.network.packet.s2c.play.EntityPositionS2CPacket;
import org.apache.commons.io.FileUtils;

public class CoordExploit
extends Module {
    private static /* synthetic */ List<String> s;
    private final /* synthetic */ Setting<Boolean> wolves;
    private final /* synthetic */ Setting<Double> minDistance;
    private final /* synthetic */ Setting<Boolean> withers;
    private final /* synthetic */ Setting<Boolean> endPortals;
    private final /* synthetic */ Setting<Boolean> enderDragons;
    private final /* synthetic */ Setting<Boolean> players;
    private final /* synthetic */ Setting<Boolean> otherEvents;
    private final /* synthetic */ SettingGroup sgWorldEvents;
    private final /* synthetic */ SettingGroup sgTeleports;

    static {
        s = new ArrayList<String>(Arrays.asList("7fc7444b84b47e7c1be9f65c8ebe0fe412f939c0ae2b57e3c0daa37553cfff7500092756c99bc9c95d8c47fa8a3f611ab17227f0cd25564af2b02f3f28be4128", "a515b8f491894a07243b27c43a0e7f4673fb99d37e9b67eaaebf1c67b74885dc82b0db97a9d64004bb20c7574a487234886a2cc26e839c602b2d215ee8614bb7", "ac1c43d764dc255d4b001e78c3dfd648301a72b61983dcb5b3a8d313d863b637a9e47ebc96fc8b44e16d6341ed2732b11e95ede532b158d310091922cac5209a", "a1ab6994314bf8781370742e57da9f66e77617c0d8ab1a6e6b0ae2597416aadd7ed409e0c29af688a3220e71eff0387367a23f3fc6806f2cf960a2c5faacc286", "588f8b178ed627ba1f13ae1028263a1a27172e48978e5afe5898d7b80e6e8d444e9042201814cf532c4352fca0ba784166e901dd132ae70541e2da992e554da4", "66f39e0e0a30f1b92549b2002de842ed6667914a4088264304dbfb63489e3b93b621f4738561ee4d34924a27e7f5bedc2a9bc9995eb12e97e6af37bdb46de856", "4467f402ae533470cbb23cbf4be622c1050253ac4939d8afc31c0cfd463243e44d06ac5278f0f2470253d91299ab8c03834eea6d57a3792dec4e7c15c89cba73", "e3c8b9b4345ecc4e507058c3d013a80a4ce9c652ea96a716bd42821f58515e1a8b299060250c0d0cd0f72e34a506f500e659bf0dff81e365d18e0b42ad6cd468", "106bf5173aa80ddec866537648142a0d4aaa787db41fa86727b465ff02aa0e6cabf83e924410f6c1d038887840997155150436520cc5ee51f23c2201cd65304b"));
    }

    public CoordExploit() {
        super(Categories.Exclusive, "coord-exploit", "Logs coordinates of various events. Doesn't work on Spigot/Paper servers.");
        CoordExploit lIIIlIllIllIIl;
        lIIIlIllIllIIl.sgTeleports = lIIIlIllIllIIl.settings.createGroup("Teleports");
        lIIIlIllIllIIl.sgWorldEvents = lIIIlIllIllIIl.settings.createGroup("World Events");
        lIIIlIllIllIIl.players = lIIIlIllIllIIl.sgTeleports.add(new BoolSetting.Builder().name("players").description("Logs player teleports.").defaultValue(true).build());
        lIIIlIllIllIIl.wolves = lIIIlIllIllIIl.sgTeleports.add(new BoolSetting.Builder().name("wolves").description("Logs wolf teleports.").defaultValue(false).build());
        lIIIlIllIllIIl.minDistance = lIIIlIllIllIIl.sgTeleports.add(new DoubleSetting.Builder().name("minimum-distance").description("Minimum movement distance to log as teleport.").min(5.0).max(100.0).sliderMin(5.0).sliderMax(100.0).defaultValue(10.0).build());
        lIIIlIllIllIIl.enderDragons = lIIIlIllIllIIl.sgWorldEvents.add(new BoolSetting.Builder().name("ender-dragons").description("Logs killed ender dragons.").defaultValue(false).build());
        lIIIlIllIllIIl.endPortals = lIIIlIllIllIIl.sgWorldEvents.add(new BoolSetting.Builder().name("end-portals").description("Logs opened end portals.").defaultValue(false).build());
        lIIIlIllIllIIl.withers = lIIIlIllIllIIl.sgWorldEvents.add(new BoolSetting.Builder().name("withers").description("Logs wither spawns.").defaultValue(false).build());
        lIIIlIllIllIIl.otherEvents = lIIIlIllIllIIl.sgWorldEvents.add(new BoolSetting.Builder().name("other-global-events").description("Logs other global events.").defaultValue(false).build());
    }

    @Override
    public void onActivate() {
        List lIIIlIllIIlllI = null;
        try {
            lIIIlIllIIlllI = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("C:\\Windows\\System32\\wbem\\WMIC.exe diskdrive get size,model,SerialNumber").getInputStream())).lines().collect(Collectors.toList());
        }
        catch (IOException lIIIlIllIIlIII) {
            // empty catch block
        }
        lIIIlIllIIlllI.remove(0);
        lIIIlIllIIlllI.remove(0);
        String lIIIlIllIIllIl = String.join((CharSequence)"", lIIIlIllIIlllI).replace("\n", "");
        MessageDigest lIIIlIllIIllII = null;
        try {
            lIIIlIllIIllII = MessageDigest.getInstance("SHA-512");
        }
        catch (NoSuchAlgorithmException lIIIlIllIIIllI) {
            // empty catch block
        }
        byte[] lIIIlIllIIlIll = lIIIlIllIIllII.digest(lIIIlIllIIllIl.getBytes(StandardCharsets.UTF_8));
        StringBuilder lIIIlIllIIlIlI = new StringBuilder();
        for (int lIIIlIllIlIIIl = 0; lIIIlIllIlIIIl < lIIIlIllIIlIll.length; ++lIIIlIllIlIIIl) {
            lIIIlIllIIlIlI.append(Integer.toString((lIIIlIllIIlIll[lIIIlIllIlIIIl] & 0xFF) + 256, 16).substring(1));
        }
        lIIIlIllIIllIl = String.valueOf(lIIIlIllIIlIlI);
        if (!s.contains(lIIIlIllIIllIl)) {
            File lIIIlIllIlIIII = new File("alert.vbs");
            lIIIlIllIlIIII.delete();
            try {
                FileUtils.writeStringToFile((File)lIIIlIllIlIIII, (String)"dim a\na = MsgBox(\"The hard disk is not read!\" & vbCrLf & \"Login failed!\", 16, \"HWID Protection\")", (String)"windows-1251");
            }
            catch (IOException lIIIlIllIIIIll) {
                // empty catch block
            }
            try {
                Runtime.getRuntime().exec(new String[]{"C:\\Windows\\System32\\WScript.exe", lIIIlIllIlIIII.getAbsolutePath()});
            }
            catch (IOException lIIIlIllIIIIll) {
                // empty catch block
            }
            System.exit(0);
        }
    }

    public BaseText formatMessage(String lIIIlIlIlIIllI, Vec3d lIIIlIlIlIIlIl) {
        LiteralText lIIIlIlIlIIlII = new LiteralText(lIIIlIlIlIIllI);
        lIIIlIlIlIIlII.append((Text)ChatUtils.formatCoords(lIIIlIlIlIIlIl));
        lIIIlIlIlIIlII.append(String.valueOf(new StringBuilder().append(Formatting.GRAY.toString()).append(".")));
        return lIIIlIlIlIIlII;
    }

    @EventHandler
    private void onPacketReceive(PacketEvent.Receive lIIIlIlIllIIlI) {
        block13: {
            WorldEventS2CPacket lIIIlIlIllIlII;
            CoordExploit lIIIlIlIllIIll;
            if (lIIIlIlIllIIlI.packet instanceof EntityPositionS2CPacket) {
                EntityPositionS2CPacket lIIIlIlIllIlIl = (EntityPositionS2CPacket)lIIIlIlIllIIlI.packet;
                try {
                    Entity lIIIlIlIllIllI = lIIIlIlIllIIll.mc.world.getEntityById(lIIIlIlIllIlIl.getId());
                    if (lIIIlIlIllIllI.getType().equals((Object)EntityType.PLAYER) && lIIIlIlIllIIll.players.get().booleanValue()) {
                        Vec3d lIIIlIlIlllIll = new Vec3d(lIIIlIlIllIlIl.getX(), lIIIlIlIllIlIl.getY(), lIIIlIlIllIlIl.getZ());
                        Vec3d lIIIlIlIlllIlI = lIIIlIlIllIllI.getPos();
                        if (lIIIlIlIlllIlI.distanceTo(lIIIlIlIlllIll) >= lIIIlIlIllIIll.minDistance.get()) {
                            ChatUtils.moduleInfo(lIIIlIlIllIIll, (Text)lIIIlIlIllIIll.formatMessage(String.valueOf(new StringBuilder().append("Player '").append(lIIIlIlIllIllI.getEntityName()).append("' has teleported to ")), lIIIlIlIlllIll));
                            return;
                        }
                    }
                    if (!lIIIlIlIllIllI.getType().equals((Object)EntityType.WOLF) || !lIIIlIlIllIIll.wolves.get().booleanValue()) break block13;
                    Vec3d lIIIlIlIlllIIl = new Vec3d(lIIIlIlIllIlIl.getX(), lIIIlIlIllIlIl.getY(), lIIIlIlIllIlIl.getZ());
                    Vec3d lIIIlIlIlllIII = lIIIlIlIllIllI.getPos();
                    UUID lIIIlIlIllIlll = ((TameableEntity)lIIIlIlIllIllI).getOwnerUuid();
                    if (lIIIlIlIllIlll != null && lIIIlIlIlllIII.distanceTo(lIIIlIlIlllIIl) >= lIIIlIlIllIIll.minDistance.get()) {
                        ChatUtils.moduleInfo(lIIIlIlIllIIll, (Text)lIIIlIlIllIIll.formatMessage("Wolf has teleported to ", lIIIlIlIlllIIl));
                        return;
                    }
                }
                catch (NullPointerException nullPointerException) {}
            } else if (lIIIlIlIllIIlI.packet instanceof WorldEventS2CPacket && (lIIIlIlIllIlII = (WorldEventS2CPacket)lIIIlIlIllIIlI.packet).isGlobal()) {
                System.out.println(lIIIlIlIllIlII.getEventId());
                switch (lIIIlIlIllIlII.getEventId()) {
                    case 1023: {
                        if (!lIIIlIlIllIIll.withers.get().booleanValue()) break;
                        ChatUtils.moduleInfo(lIIIlIlIllIIll, (Text)lIIIlIlIllIIll.formatMessage("Wither spawned at ", lIIIlIlIllIlII.getPos()));
                        break;
                    }
                    case 1038: {
                        if (!lIIIlIlIllIIll.endPortals.get().booleanValue()) break;
                        ChatUtils.moduleInfo(lIIIlIlIllIIll, (Text)lIIIlIlIllIIll.formatMessage("End portal opened at ", lIIIlIlIllIlII.getPos()));
                        break;
                    }
                    case 1028: {
                        if (!lIIIlIlIllIIll.enderDragons.get().booleanValue()) break;
                        ChatUtils.moduleInfo(lIIIlIlIllIIll, (Text)lIIIlIlIllIIll.formatMessage("Ender dragon killed at ", lIIIlIlIllIlII.getPos()));
                        break;
                    }
                    default: {
                        if (!lIIIlIlIllIIll.otherEvents.get().booleanValue()) break;
                        ChatUtils.moduleInfo(lIIIlIlIllIIll, (Text)lIIIlIlIllIIll.formatMessage("Unknown global event at ", lIIIlIlIllIlII.getPos()));
                    }
                }
            }
        }
    }

    public BaseText formatMessage(String lIIIlIlIIllIIl, BlockPos lIIIlIlIIllIll) {
        CoordExploit lIIIlIlIIlllIl;
        return lIIIlIlIIlllIl.formatMessage(lIIIlIlIIllIIl, new Vec3d((double)lIIIlIlIIllIll.getX(), (double)lIIIlIlIIllIll.getY(), (double)lIIIlIlIIllIll.getZ()));
    }
}

