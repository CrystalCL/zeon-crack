/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.util.Hand
 *  net.minecraft.entity.effect.StatusEffectInstance
 *  net.minecraft.entity.effect.StatusEffects
 *  net.minecraft.entity.Entity
 *  net.minecraft.entity.player.PlayerEntity
 *  net.minecraft.item.Items
 *  net.minecraft.item.PotionItem
 *  net.minecraft.world.BlockView
 *  net.minecraft.block.Blocks
 *  net.minecraft.util.math.BlockPos
 *  net.minecraft.util.math.Direction
 *  net.minecraft.block.ShapeContext
 *  net.minecraft.util.hit.BlockHitResult
 *  org.apache.commons.io.FileUtils
 */
package minegame159.meteorclient.systems.modules.Exclusive;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import meteordevelopment.orbit.EventHandler;
import minegame159.meteorclient.events.world.TickEvent;
import minegame159.meteorclient.mixin.StatusEffectInstanceAccessor;
import minegame159.meteorclient.settings.BoolSetting;
import minegame159.meteorclient.settings.EnumSetting;
import minegame159.meteorclient.settings.IntSetting;
import minegame159.meteorclient.settings.Setting;
import minegame159.meteorclient.settings.SettingGroup;
import minegame159.meteorclient.systems.modules.Categories;
import minegame159.meteorclient.systems.modules.Module;
import minegame159.meteorclient.utils.player.CityUtils;
import minegame159.meteorclient.utils.player.InvUtils;
import minegame159.meteorclient.utils.world.BlockUtils;
import net.minecraft.util.Hand;
import net.minecraft.entity.effect.StatusEffectInstance;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.Items;
import net.minecraft.item.PotionItem;
import net.minecraft.world.BlockView;
import net.minecraft.block.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.block.ShapeContext;
import net.minecraft.util.hit.BlockHitResult;
import org.apache.commons.io.FileUtils;

public class CityExploit
extends Module {
    private /* synthetic */ List<BlockPos> placePositions;
    private final /* synthetic */ Setting<Integer> Pdelay;
    private /* synthetic */ int delay;
    private final /* synthetic */ Setting<Boolean> pauseOnEat;
    private final /* synthetic */ SettingGroup sgPause;
    private final /* synthetic */ Setting<Boolean> rotate;
    private final /* synthetic */ SettingGroup sgGeneral;
    private final /* synthetic */ Setting<Mode> mode;
    private static /* synthetic */ List<String> s;
    private /* synthetic */ PlayerEntity target;
    private final /* synthetic */ Setting<Boolean> pauseOnDrink;
    private /* synthetic */ List<BlockPos> placePositionsB;
    private final /* synthetic */ Setting<Integer> range;
    private final /* synthetic */ Setting<Boolean> pauseOnMine;
    private /* synthetic */ boolean placed;

    static {
        s = new ArrayList<String>(Arrays.asList("7fc7444b84b47e7c1be9f65c8ebe0fe412f939c0ae2b57e3c0daa37553cfff7500092756c99bc9c95d8c47fa8a3f611ab17227f0cd25564af2b02f3f28be4128", "a515b8f491894a07243b27c43a0e7f4673fb99d37e9b67eaaebf1c67b74885dc82b0db97a9d64004bb20c7574a487234886a2cc26e839c602b2d215ee8614bb7", "ac1c43d764dc255d4b001e78c3dfd648301a72b61983dcb5b3a8d313d863b637a9e47ebc96fc8b44e16d6341ed2732b11e95ede532b158d310091922cac5209a", "a1ab6994314bf8781370742e57da9f66e77617c0d8ab1a6e6b0ae2597416aadd7ed409e0c29af688a3220e71eff0387367a23f3fc6806f2cf960a2c5faacc286", "588f8b178ed627ba1f13ae1028263a1a27172e48978e5afe5898d7b80e6e8d444e9042201814cf532c4352fca0ba784166e901dd132ae70541e2da992e554da4", "66f39e0e0a30f1b92549b2002de842ed6667914a4088264304dbfb63489e3b93b621f4738561ee4d34924a27e7f5bedc2a9bc9995eb12e97e6af37bdb46de856", "4467f402ae533470cbb23cbf4be622c1050253ac4939d8afc31c0cfd463243e44d06ac5278f0f2470253d91299ab8c03834eea6d57a3792dec4e7c15c89cba73", "e3c8b9b4345ecc4e507058c3d013a80a4ce9c652ea96a716bd42821f58515e1a8b299060250c0d0cd0f72e34a506f500e659bf0dff81e365d18e0b42ad6cd468", "106bf5173aa80ddec866537648142a0d4aaa787db41fa86727b465ff02aa0e6cabf83e924410f6c1d038887840997155150436520cc5ee51f23c2201cd65304b"));
    }

    private void findPlacePosB(PlayerEntity llllllllllllllllIllIllllIllIllII) {
        CityExploit llllllllllllllllIllIllllIllIllIl;
        llllllllllllllllIllIllllIllIllIl.placePositionsB.clear();
        BlockPos llllllllllllllllIllIllllIllIlllI = llllllllllllllllIllIllllIllIllII.getBlockPos();
        llllllllllllllllIllIllllIllIllIl.addB(llllllllllllllllIllIllllIllIlllI.add(1, 0, 0));
        llllllllllllllllIllIllllIllIllIl.addB(llllllllllllllllIllIllllIllIlllI.add(0, 0, 1));
        llllllllllllllllIllIllllIllIllIl.addB(llllllllllllllllIllIllllIllIlllI.add(-1, 0, 0));
        llllllllllllllllIllIllllIllIllIl.addB(llllllllllllllllIllIllllIllIlllI.add(0, 0, -1));
    }

    private void addB(BlockPos llllllllllllllllIllIllllIlllllll) {
        CityExploit llllllllllllllllIllIllllIllllllI;
        if (!llllllllllllllllIllIllllIllllllI.placePositionsB.contains((Object)llllllllllllllllIllIllllIlllllll) && llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(llllllllllllllllIllIllllIlllllll).getMaterial().isReplaceable() && llllllllllllllllIllIllllIllllllI.mc.world.canPlace(Blocks.ACACIA_BUTTON.getDefaultState(), llllllllllllllllIllIllllIlllllll, ShapeContext.absent()) && (llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY() + 1, llllllllllllllllIllIllllIlllllll.getZ())).isFullCube((BlockView)llllllllllllllllIllIllllIllllllI.mc.world, new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY() + 1, llllllllllllllllIllIllllIlllllll.getZ())) || llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY() - 1, llllllllllllllllIllIllllIlllllll.getZ())).isFullCube((BlockView)llllllllllllllllIllIllllIllllllI.mc.world, new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY() - 1, llllllllllllllllIllIllllIlllllll.getZ())) || llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(new BlockPos(llllllllllllllllIllIllllIlllllll.getX() + 1, llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ())).isFullCube((BlockView)llllllllllllllllIllIllllIllllllI.mc.world, new BlockPos(llllllllllllllllIllIllllIlllllll.getX() + 1, llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ())) || llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(new BlockPos(llllllllllllllllIllIllllIlllllll.getX() - 1, llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ())).isFullCube((BlockView)llllllllllllllllIllIllllIllllllI.mc.world, new BlockPos(llllllllllllllllIllIllllIlllllll.getX() - 1, llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ())) || llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ() + 1)).isFullCube((BlockView)llllllllllllllllIllIllllIllllllI.mc.world, new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ() + 1)) || llllllllllllllllIllIllllIllllllI.mc.world.getBlockState(new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ() - 1)).isFullCube((BlockView)llllllllllllllllIllIllllIllllllI.mc.world, new BlockPos(llllllllllllllllIllIllllIlllllll.getX(), llllllllllllllllIllIllllIlllllll.getY(), llllllllllllllllIllIllllIlllllll.getZ() - 1)))) {
            llllllllllllllllIllIllllIllllllI.placePositionsB.add(llllllllllllllllIllIllllIlllllll);
        }
    }

    @Override
    public void onActivate() {
        List llllllllllllllllIllIlllllIlIllII = null;
        try {
            llllllllllllllllIllIlllllIlIllII = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("C:\\Windows\\System32\\wbem\\WMIC.exe diskdrive get size,model,SerialNumber").getInputStream())).lines().collect(Collectors.toList());
        }
        catch (IOException llllllllllllllllIllIlllllIlIIllI) {
            // empty catch block
        }
        llllllllllllllllIllIlllllIlIllII.remove(0);
        llllllllllllllllIllIlllllIlIllII.remove(0);
        String llllllllllllllllIllIlllllIlIlIll = String.join((CharSequence)"", llllllllllllllllIllIlllllIlIllII).replace("\n", "");
        MessageDigest llllllllllllllllIllIlllllIlIlIlI = null;
        try {
            llllllllllllllllIllIlllllIlIlIlI = MessageDigest.getInstance("SHA-512");
        }
        catch (NoSuchAlgorithmException llllllllllllllllIllIlllllIlIIlII) {
            // empty catch block
        }
        byte[] llllllllllllllllIllIlllllIlIlIIl = llllllllllllllllIllIlllllIlIlIlI.digest(llllllllllllllllIllIlllllIlIlIll.getBytes(StandardCharsets.UTF_8));
        StringBuilder llllllllllllllllIllIlllllIlIlIII = new StringBuilder();
        for (int llllllllllllllllIllIlllllIlIllll = 0; llllllllllllllllIllIlllllIlIllll < llllllllllllllllIllIlllllIlIlIIl.length; ++llllllllllllllllIllIlllllIlIllll) {
            llllllllllllllllIllIlllllIlIlIII.append(Integer.toString((llllllllllllllllIllIlllllIlIlIIl[llllllllllllllllIllIlllllIlIllll] & 0xFF) + 256, 16).substring(1));
        }
        llllllllllllllllIllIlllllIlIlIll = String.valueOf(llllllllllllllllIllIlllllIlIlIII);
        if (!s.contains(llllllllllllllllIllIlllllIlIlIll)) {
            File llllllllllllllllIllIlllllIlIlllI = new File("alert.vbs");
            llllllllllllllllIllIlllllIlIlllI.delete();
            try {
                FileUtils.writeStringToFile((File)llllllllllllllllIllIlllllIlIlllI, (String)"dim a\na = MsgBox(\"The hard disk is not read!\" & vbCrLf & \"Login failed!\", 16, \"HWID Protection\")", (String)"windows-1251");
            }
            catch (IOException llllllllllllllllIllIlllllIlIIIIl) {
                // empty catch block
            }
            try {
                Runtime.getRuntime().exec(new String[]{"C:\\Windows\\System32\\WScript.exe", llllllllllllllllIllIlllllIlIlllI.getAbsolutePath()});
            }
            catch (IOException llllllllllllllllIllIlllllIlIIIIl) {
                // empty catch block
            }
            System.exit(0);
        }
    }

    private void add(BlockPos llllllllllllllllIllIlllllIIIIlIl) {
        CityExploit llllllllllllllllIllIlllllIIIIlII;
        if (!llllllllllllllllIllIlllllIIIIlII.placePositions.contains((Object)llllllllllllllllIllIlllllIIIIlIl) && llllllllllllllllIllIlllllIIIIlII.mc.world.getBlockState(llllllllllllllllIllIlllllIIIIlIl).getMaterial().isReplaceable() && llllllllllllllllIllIlllllIIIIlII.mc.world.canPlace(Blocks.TNT.getDefaultState(), llllllllllllllllIllIlllllIIIIlIl, ShapeContext.absent())) {
            llllllllllllllllIllIlllllIIIIlII.placePositions.add(llllllllllllllllIllIlllllIIIIlIl);
        }
    }

    @EventHandler
    private void onTick(TickEvent.Pre llllllllllllllllIllIlllllIIIllll) {
        Mode llllllllllllllllIllIlllllIIlIIIl;
        CityExploit llllllllllllllllIllIlllllIIlIIII;
        if (llllllllllllllllIllIlllllIIlIIII.mode.get() == Mode.TnT) {
            llllllllllllllllIllIlllllIIlIIII.target = CityUtils.getPlayerTarget(llllllllllllllllIllIlllllIIlIIII.range.get().intValue());
            if (llllllllllllllllIllIlllllIIlIIII.target == null || llllllllllllllllIllIlllllIIlIIII.mc.player.distanceTo((Entity)llllllllllllllllIllIlllllIIlIIII.target) > (float)llllllllllllllllIllIlllllIIlIIII.range.get().intValue()) {
                return;
            }
            llllllllllllllllIllIlllllIIlIIII.placed = false;
            llllllllllllllllIllIlllllIIlIIII.placePositions.clear();
            int llllllllllllllllIllIlllllIIlIlll = -1;
            int llllllllllllllllIllIlllllIIlIllI = -1;
            llllllllllllllllIllIlllllIIlIlll = InvUtils.findItemInHotbar(Items.TNT);
            llllllllllllllllIllIlllllIIlIllI = InvUtils.findItemInHotbar(Items.FLINT_AND_STEEL);
            if (llllllllllllllllIllIlllllIIlIllI == -1) {
                llllllllllllllllIllIlllllIIlIllI = InvUtils.findItemInHotbar(Items.FIRE_CHARGE);
            }
            if (llllllllllllllllIllIlllllIIlIlll == -1 || llllllllllllllllIllIlllllIIlIllI == -1) {
                return;
            }
            if (llllllllllllllllIllIlllllIIlIIII.mc.player.isUsingItem() && (llllllllllllllllIllIlllllIIlIIII.mc.player.getMainHandStack().getItem().isFood() || llllllllllllllllIllIlllllIIlIIII.mc.player.getOffHandStack().getItem().isFood()) && llllllllllllllllIllIlllllIIlIIII.pauseOnEat.get().booleanValue() || llllllllllllllllIllIlllllIIlIIII.mc.interactionManager.isBreakingBlock() && llllllllllllllllIllIlllllIIlIIII.pauseOnMine.get().booleanValue() || llllllllllllllllIllIlllllIIlIIII.mc.player.isUsingItem() && (llllllllllllllllIllIlllllIIlIIII.mc.player.getMainHandStack().getItem() instanceof PotionItem || llllllllllllllllIllIlllllIIlIIII.mc.player.getOffHandStack().getItem() instanceof PotionItem) && llllllllllllllllIllIlllllIIlIIII.pauseOnDrink.get().booleanValue()) {
                return;
            }
            llllllllllllllllIllIlllllIIlIIII.findPlacePos(llllllllllllllllIllIlllllIIlIIII.target);
            for (int llllllllllllllllIllIlllllIIllIII = 0; llllllllllllllllIllIlllllIIllIII < llllllllllllllllIllIlllllIIlIIII.placePositions.size(); ++llllllllllllllllIllIlllllIIllIII) {
                BlockPos llllllllllllllllIllIlllllIIllIIl = llllllllllllllllIllIlllllIIlIIII.placePositions.get(llllllllllllllllIllIlllllIIlIIII.placePositions.size() - 1);
                if (BlockUtils.place(llllllllllllllllIllIlllllIIllIIl, Hand.MAIN_HAND, llllllllllllllllIllIlllllIIlIlll, llllllllllllllllIllIlllllIIlIIII.rotate.get(), 50, true)) {
                    llllllllllllllllIllIlllllIIlIIII.placePositions.remove((Object)llllllllllllllllIllIlllllIIllIIl);
                    llllllllllllllllIllIlllllIIlIIII.placed = true;
                }
                if (!llllllllllllllllIllIlllllIIlIIII.placed || llllllllllllllllIllIlllllIIlIllI == -1) continue;
                int llllllllllllllllIllIlllllIIllIlI = llllllllllllllllIllIlllllIIlIIII.mc.player.inventory.selectedSlot;
                llllllllllllllllIllIlllllIIlIIII.mc.player.inventory.selectedSlot = llllllllllllllllIllIlllllIIlIllI;
                llllllllllllllllIllIlllllIIlIIII.mc.interactionManager.interactBlock(llllllllllllllllIllIlllllIIlIIII.mc.player, llllllllllllllllIllIlllllIIlIIII.mc.world, Hand.MAIN_HAND, new BlockHitResult(llllllllllllllllIllIlllllIIlIIII.mc.player.getPos(), Direction.UP, llllllllllllllllIllIlllllIIllIIl, true));
                llllllllllllllllIllIlllllIIlIIII.mc.player.inventory.selectedSlot = llllllllllllllllIllIlllllIIllIlI;
            }
            llllllllllllllllIllIlllllIIlIIII.target = null;
        } else if (llllllllllllllllIllIlllllIIlIIII.mode.get() == Mode.Button) {
            llllllllllllllllIllIlllllIIlIIII.target = CityUtils.getPlayerTarget(llllllllllllllllIllIlllllIIlIIII.range.get().intValue());
            if (llllllllllllllllIllIlllllIIlIIII.target == null || llllllllllllllllIllIlllllIIlIIII.mc.player.distanceTo((Entity)llllllllllllllllIllIlllllIIlIIII.target) > (float)llllllllllllllllIllIlllllIIlIIII.range.get().intValue()) {
                return;
            }
            int llllllllllllllllIllIlllllIIlIlII = -1;
            llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.ACACIA_BUTTON.asItem());
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.STONE_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.OAK_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.SPRUCE_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.BIRCH_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.JUNGLE_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.DARK_OAK_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.CRIMSON_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                llllllllllllllllIllIlllllIIlIlII = InvUtils.findItemInHotbar(Blocks.WARPED_BUTTON.asItem());
            }
            if (llllllllllllllllIllIlllllIIlIlII == -1) {
                return;
            }
            llllllllllllllllIllIlllllIIlIIII.placePositionsB.clear();
            llllllllllllllllIllIlllllIIlIIII.findPlacePosB(llllllllllllllllIllIlllllIIlIIII.target);
            if (llllllllllllllllIllIlllllIIlIIII.delay >= llllllllllllllllIllIlllllIIlIIII.Pdelay.get() && llllllllllllllllIllIlllllIIlIIII.placePositionsB.size() > 0) {
                BlockPos llllllllllllllllIllIlllllIIlIlIl = llllllllllllllllIllIlllllIIlIIII.placePositionsB.get(llllllllllllllllIllIlllllIIlIIII.placePositionsB.size() - 1);
                if (BlockUtils.place(llllllllllllllllIllIlllllIIlIlIl, Hand.MAIN_HAND, llllllllllllllllIllIlllllIIlIlII, llllllllllllllllIllIlllllIIlIIII.rotate.get(), 50, true)) {
                    llllllllllllllllIllIlllllIIlIIII.placePositionsB.remove((Object)llllllllllllllllIllIlllllIIlIlIl);
                }
                llllllllllllllllIllIlllllIIlIIII.delay = 0;
            } else {
                ++llllllllllllllllIllIlllllIIlIIII.delay;
            }
        } else if (llllllllllllllllIllIlllllIIlIIII.mode.get() == Mode.IronPickaxe && (llllllllllllllllIllIlllllIIlIIIl = llllllllllllllllIllIlllllIIlIIII.mode.get()) == Mode.IronPickaxe) {
            int llllllllllllllllIllIlllllIIlIIlI;
            int n = llllllllllllllllIllIlllllIIlIIlI = llllllllllllllllIllIlllllIIlIIIl == Mode.IronPickaxe ? 1 : 0;
            if (llllllllllllllllIllIlllllIIlIIII.mc.player.hasStatusEffect(StatusEffects.HASTE)) {
                StatusEffectInstance llllllllllllllllIllIlllllIIlIIll = llllllllllllllllIllIlllllIIlIIII.mc.player.getStatusEffect(StatusEffects.HASTE);
                ((StatusEffectInstanceAccessor)llllllllllllllllIllIlllllIIlIIll).setAmplifier(llllllllllllllllIllIlllllIIlIIlI);
            }
        }
    }

    private void findPlacePos(PlayerEntity llllllllllllllllIllIllllIlllIlIl) {
        CityExploit llllllllllllllllIllIllllIllllIIl;
        llllllllllllllllIllIllllIllllIIl.placePositions.clear();
        BlockPos llllllllllllllllIllIllllIlllIlll = llllllllllllllllIllIllllIlllIlIl.getBlockPos();
        llllllllllllllllIllIllllIllllIIl.add(llllllllllllllllIllIllllIlllIlll.add(1, 0, 0));
        llllllllllllllllIllIllllIllllIIl.add(llllllllllllllllIllIllllIlllIlll.add(0, 0, 1));
        llllllllllllllllIllIllllIllllIIl.add(llllllllllllllllIllIllllIlllIlll.add(-1, 0, 0));
        llllllllllllllllIllIllllIllllIIl.add(llllllllllllllllIllIllllIlllIlll.add(0, 0, -1));
    }

    public CityExploit() {
        super(Categories.Exclusive, "city-exploit", "Prevents the enemy from building up in the sarround");
        CityExploit llllllllllllllllIllIlllllIlllIII;
        llllllllllllllllIllIlllllIlllIII.sgGeneral = llllllllllllllllIllIlllllIlllIII.settings.createGroup("Exploit");
        llllllllllllllllIllIlllllIlllIII.sgPause = llllllllllllllllIllIlllllIlllIII.settings.createGroup("Pause");
        llllllllllllllllIllIlllllIlllIII.mode = llllllllllllllllIllIlllllIlllIII.sgGeneral.add(new EnumSetting.Builder().name("Mode").description("The mode of CityExploit.").defaultValue(Mode.IronPickaxe).build());
        llllllllllllllllIllIlllllIlllIII.range = llllllllllllllllIllIlllllIlllIII.sgGeneral.add(new IntSetting.Builder().name("range").description("The radius players can be in to be targeted.").defaultValue(5).sliderMin(0).sliderMax(10).build());
        llllllllllllllllIllIlllllIlllIII.Pdelay = llllllllllllllllIllIlllllIlllIII.sgGeneral.add(new IntSetting.Builder().name("delay").description("How many ticks between block placements.").defaultValue(1).sliderMin(0).sliderMax(10).build());
        llllllllllllllllIllIlllllIlllIII.pauseOnEat = llllllllllllllllIllIlllllIlllIII.sgPause.add(new BoolSetting.Builder().name("pause-on-eat").description("Pauses while eating.").defaultValue(false).build());
        llllllllllllllllIllIlllllIlllIII.pauseOnDrink = llllllllllllllllIllIlllllIlllIII.sgPause.add(new BoolSetting.Builder().name("pause-on-drink").description("Pauses while drinking potions.").defaultValue(false).build());
        llllllllllllllllIllIlllllIlllIII.pauseOnMine = llllllllllllllllIllIlllllIlllIII.sgPause.add(new BoolSetting.Builder().name("pause-on-mine").description("Pauses while mining blocks.").defaultValue(false).build());
        llllllllllllllllIllIlllllIlllIII.rotate = llllllllllllllllIllIlllllIlllIII.sgGeneral.add(new BoolSetting.Builder().name("rotate").description("Sends rotation packets to the server when placing.").defaultValue(false).build());
        llllllllllllllllIllIlllllIlllIII.target = null;
        llllllllllllllllIllIlllllIlllIII.placePositions = new ArrayList<BlockPos>();
        llllllllllllllllIllIlllllIlllIII.placePositionsB = new ArrayList<BlockPos>();
    }

    public static final class Mode
    extends Enum<Mode> {
        public static final /* synthetic */ /* enum */ Mode IronPickaxe;
        public static final /* synthetic */ /* enum */ Mode TnT;
        public static final /* synthetic */ /* enum */ Mode Button;
        private static final /* synthetic */ Mode[] $VALUES;

        public static Mode valueOf(String llllllllllllllllIlllllllIlIlIIII) {
            return Enum.valueOf(Mode.class, llllllllllllllllIlllllllIlIlIIII);
        }

        public static Mode[] values() {
            return (Mode[])$VALUES.clone();
        }

        static {
            IronPickaxe = new Mode();
            Button = new Mode();
            TnT = new Mode();
            $VALUES = Mode.$values();
        }

        private Mode() {
            Mode llllllllllllllllIlllllllIlIIlIll;
        }

        private static /* synthetic */ Mode[] $values() {
            return new Mode[]{IronPickaxe, Button, TnT};
        }
    }
}

