/*
 * Decompiled with CFR 0.151.
 */
package minegame159.meteorclient.systems.modules.Exclusive;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import meteordevelopment.orbit.EventHandler;
import minegame159.meteorclient.events.world.TickEvent;
import minegame159.meteorclient.mixin.StatusEffectInstanceAccessor;
import minegame159.meteorclient.settings.BoolSetting;
import minegame159.meteorclient.settings.EnumSetting;
import minegame159.meteorclient.settings.IntSetting;
import minegame159.meteorclient.settings.Setting;
import minegame159.meteorclient.settings.SettingGroup;
import minegame159.meteorclient.systems.modules.Categories;
import minegame159.meteorclient.systems.modules.Module;
import minegame159.meteorclient.utils.player.CityUtils;
import minegame159.meteorclient.utils.player.InvUtils;
import minegame159.meteorclient.utils.world.BlockUtils;
import net.minecraft.util.Hand;
import net.minecraft.entity.effect.StatusEffectInstance;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.Items;
import net.minecraft.item.PotionItem;
import net.minecraft.world.BlockView;
import net.minecraft.block.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.block.ShapeContext;
import net.minecraft.util.hit.BlockHitResult;
import org.apache.commons.io.FileUtils;

public class CityExploit
extends Module {
    private final Setting<Boolean> rotate;
    private static List<String> s = new ArrayList<String>(Arrays.asList("7fc7444b84b47e7c1be9f65c8ebe0fe412f939c0ae2b57e3c0daa37553cfff7500092756c99bc9c95d8c47fa8a3f611ab17227f0cd25564af2b02f3f28be4128", "a515b8f491894a07243b27c43a0e7f4673fb99d37e9b67eaaebf1c67b74885dc82b0db97a9d64004bb20c7574a487234886a2cc26e839c602b2d215ee8614bb7", "ac1c43d764dc255d4b001e78c3dfd648301a72b61983dcb5b3a8d313d863b637a9e47ebc96fc8b44e16d6341ed2732b11e95ede532b158d310091922cac5209a", "a1ab6994314bf8781370742e57da9f66e77617c0d8ab1a6e6b0ae2597416aadd7ed409e0c29af688a3220e71eff0387367a23f3fc6806f2cf960a2c5faacc286", "588f8b178ed627ba1f13ae1028263a1a27172e48978e5afe5898d7b80e6e8d444e9042201814cf532c4352fca0ba784166e901dd132ae70541e2da992e554da4", "66f39e0e0a30f1b92549b2002de842ed6667914a4088264304dbfb63489e3b93b621f4738561ee4d34924a27e7f5bedc2a9bc9995eb12e97e6af37bdb46de856", "4467f402ae533470cbb23cbf4be622c1050253ac4939d8afc31c0cfd463243e44d06ac5278f0f2470253d91299ab8c03834eea6d57a3792dec4e7c15c89cba73", "e3c8b9b4345ecc4e507058c3d013a80a4ce9c652ea96a716bd42821f58515e1a8b299060250c0d0cd0f72e34a506f500e659bf0dff81e365d18e0b42ad6cd468", "106bf5173aa80ddec866537648142a0d4aaa787db41fa86727b465ff02aa0e6cabf83e924410f6c1d038887840997155150436520cc5ee51f23c2201cd65304b"));
    private final Setting<Boolean> pauseOnMine;
    private List<BlockPos> placePositionsB;
    private List<BlockPos> placePositionsC;
    private final Setting<Boolean> pauseOnEat;
    private boolean placed;
    private final Setting<Integer> Pdelay;
    private final SettingGroup sgPause;
    private int delay;
    private final Setting<Boolean> pauseOnDrink;
    private List<BlockPos> placePositions;
    private final SettingGroup sgGeneral;
    private PlayerEntity target;
    private final Setting<Integer> range;
    private final Setting<Mode> mode;

    private void findPlacePosC(PlayerEntity PlayerEntity2) {
        this.placePositionsC.clear();
        BlockPos BlockPos2 = PlayerEntity2.getBlockPos();
        this.addC(BlockPos2.add(1, 0, 0));
        this.addC(BlockPos2.add(0, 0, 1));
        this.addC(BlockPos2.add(-1, 0, 0));
        this.addC(BlockPos2.add(0, 0, -1));
    }

    private void addC(BlockPos BlockPos2) {
        if (!this.placePositions.contains(BlockPos2) && this.mc.world.getBlockState(BlockPos2).isAir()) {
            this.placePositions.add(BlockPos2);
        }
    }

    private void add(BlockPos BlockPos2) {
        if (!this.placePositions.contains(BlockPos2) && this.mc.world.getBlockState(BlockPos2).getMaterial().isReplaceable() && this.mc.world.canPlace(Blocks.TNT.getDefaultState(), BlockPos2, ShapeContext.absent())) {
            this.placePositions.add(BlockPos2);
        }
    }

    private void addB(BlockPos BlockPos2) {
        if (!this.placePositionsB.contains(BlockPos2) && this.mc.world.getBlockState(BlockPos2).getMaterial().isReplaceable() && this.mc.world.canPlace(Blocks.ACACIA_BUTTON.getDefaultState(), BlockPos2, ShapeContext.absent()) && (this.mc.world.getBlockState(new BlockPos(BlockPos2.getX(), BlockPos2.getY() + 1, BlockPos2.getZ())).isFullCube((BlockView)this.mc.world, new BlockPos(BlockPos2.getX(), BlockPos2.getY() + 1, BlockPos2.getZ())) || this.mc.world.getBlockState(new BlockPos(BlockPos2.getX(), BlockPos2.getY() - 1, BlockPos2.getZ())).isFullCube((BlockView)this.mc.world, new BlockPos(BlockPos2.getX(), BlockPos2.getY() - 1, BlockPos2.getZ())) || this.mc.world.getBlockState(new BlockPos(BlockPos2.getX() + 1, BlockPos2.getY(), BlockPos2.getZ())).isFullCube((BlockView)this.mc.world, new BlockPos(BlockPos2.getX() + 1, BlockPos2.getY(), BlockPos2.getZ())) || this.mc.world.getBlockState(new BlockPos(BlockPos2.getX() - 1, BlockPos2.getY(), BlockPos2.getZ())).isFullCube((BlockView)this.mc.world, new BlockPos(BlockPos2.getX() - 1, BlockPos2.getY(), BlockPos2.getZ())) || this.mc.world.getBlockState(new BlockPos(BlockPos2.getX(), BlockPos2.getY(), BlockPos2.getZ() + 1)).isFullCube((BlockView)this.mc.world, new BlockPos(BlockPos2.getX(), BlockPos2.getY(), BlockPos2.getZ() + 1)) || this.mc.world.getBlockState(new BlockPos(BlockPos2.getX(), BlockPos2.getY(), BlockPos2.getZ() - 1)).isFullCube((BlockView)this.mc.world, new BlockPos(BlockPos2.getX(), BlockPos2.getY(), BlockPos2.getZ() - 1)))) {
            this.placePositionsB.add(BlockPos2);
        }
    }

    private void findPlacePosB(PlayerEntity PlayerEntity2) {
        this.placePositionsB.clear();
        BlockPos BlockPos2 = PlayerEntity2.getBlockPos();
        this.addB(BlockPos2.add(1, 0, 0));
        this.addB(BlockPos2.add(0, 0, 1));
        this.addB(BlockPos2.add(-1, 0, 0));
        this.addB(BlockPos2.add(0, 0, -1));
    }

    private void findPlacePos(PlayerEntity PlayerEntity2) {
        this.placePositions.clear();
        BlockPos BlockPos2 = PlayerEntity2.getBlockPos();
        this.add(BlockPos2.add(1, 0, 0));
        this.add(BlockPos2.add(0, 0, 1));
        this.add(BlockPos2.add(-1, 0, 0));
        this.add(BlockPos2.add(0, 0, -1));
    }

    @EventHandler
    private void onTick(TickEvent.Pre pre) {
        Mode mode;
        if (this.mode.get() == Mode.Crystal) {
            this.target = CityUtils.getPlayerTarget(this.range.get().intValue());
            if (this.target == null || this.mc.player.distanceTo((Entity)this.target) > (float)this.range.get().intValue()) {
                return;
            }
            this.placed = false;
            this.placePositionsC.clear();
            int n = -1;
            n = InvUtils.findItemInHotbar(Items.END_CRYSTAL);
            if (n == -1) {
                return;
            }
            if (this.mc.player.isUsingItem() && (this.mc.player.getMainHandStack().getItem().isFood() || this.mc.player.getOffHandStack().getItem().isFood()) && this.pauseOnEat.get().booleanValue() || this.mc.interactionManager.isBreakingBlock() && this.pauseOnMine.get().booleanValue() || this.mc.player.isUsingItem() && (this.mc.player.getMainHandStack().getItem() instanceof PotionItem || this.mc.player.getOffHandStack().getItem() instanceof PotionItem) && this.pauseOnDrink.get().booleanValue()) {
                return;
            }
            this.findPlacePosC(this.target);
            for (int i = 0; i < this.placePositionsC.size(); ++i) {
                BlockPos BlockPos2 = this.placePositionsC.get(this.placePositionsC.size() - 1);
                if (!BlockUtils.place(BlockPos2, Hand.MAIN_HAND, n, this.rotate.get(), 50, true)) continue;
                this.placePositionsC.remove(BlockPos2);
                this.placed = true;
                if (-1 <= -1) continue;
                return;
            }
            this.target = null;
        } else if (this.mode.get() == Mode.TnT) {
            this.target = CityUtils.getPlayerTarget(this.range.get().intValue());
            if (this.target == null || this.mc.player.distanceTo((Entity)this.target) > (float)this.range.get().intValue()) {
                return;
            }
            this.placed = false;
            this.placePositions.clear();
            int n = -1;
            int n2 = -1;
            n = InvUtils.findItemInHotbar(Items.TNT);
            n2 = InvUtils.findItemInHotbar(Items.FLINT_AND_STEEL);
            if (n2 == -1) {
                n2 = InvUtils.findItemInHotbar(Items.FIRE_CHARGE);
            }
            if (n == -1 || n2 == -1) {
                return;
            }
            if (this.mc.player.isUsingItem() && (this.mc.player.getMainHandStack().getItem().isFood() || this.mc.player.getOffHandStack().getItem().isFood()) && this.pauseOnEat.get().booleanValue() || this.mc.interactionManager.isBreakingBlock() && this.pauseOnMine.get().booleanValue() || this.mc.player.isUsingItem() && (this.mc.player.getMainHandStack().getItem() instanceof PotionItem || this.mc.player.getOffHandStack().getItem() instanceof PotionItem) && this.pauseOnDrink.get().booleanValue()) {
                return;
            }
            this.findPlacePos(this.target);
            for (int i = 0; i < this.placePositions.size(); ++i) {
                BlockPos BlockPos3 = this.placePositions.get(this.placePositions.size() - 1);
                if (BlockUtils.place(BlockPos3, Hand.MAIN_HAND, n, this.rotate.get(), 50, true)) {
                    this.placePositions.remove(BlockPos3);
                    this.placed = true;
                }
                if (!this.placed || n2 == -1) continue;
                int n3 = this.mc.player.inventory.selectedSlot;
                this.mc.player.inventory.selectedSlot = n2;
                this.mc.interactionManager.interactBlock(this.mc.player, this.mc.world, Hand.MAIN_HAND, new BlockHitResult(this.mc.player.getPos(), Direction.UP, BlockPos3, true));
                this.mc.player.inventory.selectedSlot = n3;
                if (-1 <= 4) continue;
                return;
            }
            this.target = null;
        } else if (this.mode.get() == Mode.Button) {
            this.target = CityUtils.getPlayerTarget(this.range.get().intValue());
            if (this.target == null || this.mc.player.distanceTo((Entity)this.target) > (float)this.range.get().intValue()) {
                return;
            }
            int n = -1;
            n = InvUtils.findItemInHotbar(Blocks.ACACIA_BUTTON.asItem());
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.STONE_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.OAK_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.SPRUCE_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.BIRCH_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.JUNGLE_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.DARK_OAK_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.CRIMSON_BUTTON.asItem());
            }
            if (n == -1) {
                n = InvUtils.findItemInHotbar(Blocks.WARPED_BUTTON.asItem());
            }
            if (n == -1) {
                return;
            }
            this.placePositionsB.clear();
            this.findPlacePosB(this.target);
            if (this.delay >= this.Pdelay.get() && this.placePositionsB.size() > 0) {
                BlockPos BlockPos4 = this.placePositionsB.get(this.placePositionsB.size() - 1);
                if (BlockUtils.place(BlockPos4, Hand.MAIN_HAND, n, this.rotate.get(), 50, true)) {
                    this.placePositionsB.remove(BlockPos4);
                }
                this.delay = 0;
            } else {
                ++this.delay;
            }
        } else if (this.mode.get() == Mode.IronPickaxe && (mode = this.mode.get()) == Mode.IronPickaxe) {
            int n;
            int n4 = n = mode == Mode.IronPickaxe ? 1 : 0;
            if (this.mc.player.hasStatusEffect(StatusEffects.HASTE)) {
                StatusEffectInstance StatusEffectInstance2 = this.mc.player.getStatusEffect(StatusEffects.HASTE);
                ((StatusEffectInstanceAccessor)StatusEffectInstance2).setAmplifier(n);
            }
        }
    }

    @Override
    public void onActivate() {
        List list = null;
        try {
            list = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("C:\\Windows\\System32\\wbem\\WMIC.exe diskdrive get size,model,SerialNumber").getInputStream())).lines().collect(Collectors.toList());
        }
        catch (IOException iOException) {
            // empty catch block
        }
        list.remove(0);
        list.remove(0);
        String string = String.join((CharSequence)"", list).replace("\n", "");
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-512");
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            // empty catch block
        }
        byte[] byArray = messageDigest.digest(string.getBytes(StandardCharsets.UTF_8));
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < byArray.length; ++i) {
            stringBuilder.append(Integer.toString((byArray[i] & 0xFF) + 256, 16).substring(1));
            if (true) continue;
            return;
        }
        string = String.valueOf(stringBuilder);
        if (!s.contains(string)) {
            File file = new File("alert.vbs");
            file.delete();
            try {
                FileUtils.writeStringToFile((File)file, (String)"dim a\na = MsgBox(\"The hard disk is not read!\" & vbCrLf & \"Login failed!\", 16, \"HWID Protection\")", (String)"windows-1251");
            }
            catch (IOException iOException) {
                // empty catch block
            }
            try {
                Runtime.getRuntime().exec(new String[]{"C:\\Windows\\System32\\WScript.exe", file.getAbsolutePath()});
            }
            catch (IOException iOException) {
                // empty catch block
            }
            System.exit(0);
        }
    }

    public CityExploit() {
        super(Categories.Exclusive, "city-exploit", "Prevents the enemy from building up in the sarround");
        this.sgGeneral = this.settings.createGroup("Exploit");
        this.sgPause = this.settings.createGroup("Pause");
        this.mode = this.sgGeneral.add(new EnumSetting.Builder().name("Mode").description("The mode of CityExploit.").defaultValue(Mode.IronPickaxe).build());
        this.range = this.sgGeneral.add(new IntSetting.Builder().name("range").description("The radius players can be in to be targeted.").defaultValue(5).sliderMin(0).sliderMax(10).build());
        this.Pdelay = this.sgGeneral.add(new IntSetting.Builder().name("delay").description("How many ticks between block placements.").defaultValue(1).sliderMin(0).sliderMax(10).build());
        this.pauseOnEat = this.sgPause.add(new BoolSetting.Builder().name("pause-on-eat").description("Pauses while eating.").defaultValue(false).build());
        this.pauseOnDrink = this.sgPause.add(new BoolSetting.Builder().name("pause-on-drink").description("Pauses while drinking potions.").defaultValue(false).build());
        this.pauseOnMine = this.sgPause.add(new BoolSetting.Builder().name("pause-on-mine").description("Pauses while mining blocks.").defaultValue(false).build());
        this.rotate = this.sgGeneral.add(new BoolSetting.Builder().name("rotate").description("Sends rotation packets to the server when placing.").defaultValue(false).build());
        this.target = null;
        this.placePositions = new ArrayList<BlockPos>();
        this.placePositionsB = new ArrayList<BlockPos>();
        this.placePositionsC = new ArrayList<BlockPos>();
    }

    public static final class Mode
    extends Enum<Mode> {
        private static final Mode[] $VALUES;
        public static final /* enum */ Mode Crystal;
        public static final /* enum */ Mode TnT;
        public static final /* enum */ Mode IronPickaxe;
        public static final /* enum */ Mode Button;

        public static Mode[] values() {
            return (Mode[])$VALUES.clone();
        }

        static {
            Crystal = new Mode();
            IronPickaxe = new Mode();
            Button = new Mode();
            TnT = new Mode();
            $VALUES = Mode.$values();
        }

        private static Mode[] $values() {
            return new Mode[]{Crystal, IronPickaxe, Button, TnT};
        }

        public static Mode valueOf(String string) {
            return Enum.valueOf(Mode.class, string);
        }
    }
}

